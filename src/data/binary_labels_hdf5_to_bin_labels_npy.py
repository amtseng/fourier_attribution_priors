import h5py
import numpy as np
import tqdm
import click
import os

def labels_hdf5_to_bin_labels_array(label_hdf5):
    """
    From an HDF5 of labels, generates a NumPy array containing positive or
    negative labels for each bin.
    Arguments:
        `label_hdf5`: path to an HDF5 containing labels; if an HDF5 path, must
            be a single dataset created by
            `generate_ENCODE_TFChIP_binary_labels.sh`; each row must be:
            (index, values, end, start, chrom), where the values is a T-array of
            values, for each task T, containing 0, 1, or nan
    Returns an N x 2 object array, where the first column is the chromosome,
    and the second column is an integer representing whether or not that bin
    is to be labeled as a positive (1), negative (0), or ambiguous (-1, to be
    ignored). Note that this array is parallel to the N rows in the HDF5. Also
    note that any bins that are all ambiguous, or only ambiguous and negative,
    will be given a label of ambiguous (-1).
    """
    print("Gathering bin label indices:")
    with h5py.File(label_hdf5, "r") as f:
        data = f["data"]["table"]
        labels = np.empty(data.shape + (2,), dtype=object)
        labels[:, 1] = -1  # Default to ambiguous (-1)
       
        chunk_size = 20000
        num_chunks = int(np.ceil(data.shape[0] / chunk_size))
        for i in tqdm.trange(num_chunks):
            chunk_slice = slice(i * chunk_size, (i + 1) * chunk_size)
            chunk = data[chunk_slice]

            chroms = np.array([row[4] for row in chunk]).astype(str)
            labels[chunk_slice, 0] = chroms

            vals = np.array([row[1] for row in chunk])
            # Mask for where a row is positive or negative
            pos_mask = np.any(vals == 1, axis=1)
            neg_mask = np.all(vals == 0, axis=1)
            labels[chunk_slice, 1][pos_mask] = 1
            labels[chunk_slice, 1][neg_mask] = 0
            # -1 wherever did not pass mask
    return labels


@click.command()
@click.option(
    "--labels_hdf5", "-i", required=True,
    help="Path to labels HDF5, generated by generate_ENCODE_TFChIP_binary_labels.sh"
)
@click.option(
    "--bin_labels_npy", "-o", default=None,
    help="Output path for bin labels NumPy array; defaults to {dirname X_labels.h5}/X_bin_labels.npy"
)
def main(labels_hdf5, bin_labels_npy):
    if not bin_labels_npy:
        dir_path = os.path.dirname(labels_hdf5)
        base_name = os.path.basename(labels_hdf5)
        if base_name.endswith("_labels.h5"):
            stem = base_name[:-10]
            npy_name = stem + "_bin_labels.npy"
        else:
            npy_name = "bin_labels.npy"
        bin_labels_npy = os.path.join(dir_path, npy_name)
    os.makedirs(os.path.dirname(bin_labels_npy), exist_ok=True)

    bin_labels_array = labels_hdf5_to_bin_labels_array(labels_hdf5)
    np.save(bin_labels_npy, bin_labels_array, allow_pickle=True)


if __name__ == "__main__":
    main()
